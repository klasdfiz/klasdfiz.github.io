<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[mysql-proxy installation]]></title>
      <url>%2F2016%2F11%2F10%2Fmysql-proxy-installation%2F</url>
      <content type="text"><![CDATA[os: ubuntu 13.04 amd64 1) install the lua env.1sudo apt-get install liblua5.1-0-dev 2) install the mysql-proxy1sudo apt-get install mysql-proxy 3) start mysql-proxy1mysql-proxy --proxy-address=your_ip:your_port --proxy-backend-addresses=your_mysql_server_addresses --proxy-lua-script=/usr/share/mysql-proxy/rw-splitting.lua --admin-username=your_name --admin-password=your_password --admin-lua-script=/usr/share/mysql-proxy/admin.lua ========== update: 今天仓促地post了这篇，然后我的站点就挂掉了，不清楚是什么问题，调了几个小时依旧不能解决，考虑到之前博文有备份，索性rebuild了整个bog，我这种解法也是蛮暴力的+_+]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu低版本更新源]]></title>
      <url>%2F2016%2F11%2F02%2FUbuntu%E4%BD%8E%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E6%BA%90%2F</url>
      <content type="text"><![CDATA[由于很多原型系统都是在低版本的linux上研发的，所以经常需要用到这些老古董，但是很多源都已经不支持在线安装和更新了，因此google到了一份支持老版本的更新源，备份下。 12345678910111213141516/etc/apt/sources.listdeb http://old-releases.ubuntu.com/ubuntu/ raring main universe restricted multiversedeb-src http://old-releases.ubuntu.com/ubuntu/ raring main universe restricted multiversedeb http://old-releases.ubuntu.com/ubuntu/ raring-security main universe restricted multiversedeb-src http://old-releases.ubuntu.com/ubuntu/ raring-security main universe restricted multiversedeb http://old-releases.ubuntu.com/ubuntu/ raring-updates main universe restricted multiversedeb-src http://old-releases.ubuntu.com/ubuntu/ raring-updates main universe restricted multiversedeb http://old-releases.ubuntu.com/ubuntu/ raring-backports main restricted universe multiversedeb-src http://old-releases.ubuntu.com/ubuntu/ raring-backports main restricted universe multiversedeb http://old-releases.ubuntu.com/ubuntu/ raring-proposed main restricted universe multiversedeb-src http://old-releases.ubuntu.com/ubuntu/ raring-proposed main restricted universe multiverse]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello Blogs]]></title>
      <url>%2F2016%2F09%2F15%2FHello-Blogs%2F</url>
      <content type="text"><![CDATA[Hexo+github博客搭建成功，以后就往这里发博文了^_^，开博先来一篇搭建的过程，记录下方便以后查阅。PS：之前的博客地址是http://blog.csdn.net/scanf5288 工具 node.js git github账户 duoshuo账户 macOS 安装Hexohexo是一个基于node.js的简便、功能强劲的博客框架。Nodejs的安装是傻瓜式地点下一步即可。安装后，其包管理器npm也会一并安好。 1）打开terminal，键入命令1sudo npm install -g hexo-cli --no-optional 2）选择在自己方便管理的地方，创建博客的根目录文件夹，如我是在~/Documents/下创建了一个Blog的文件夹，统一管理。 3）进入根目录，执行两条命令hexo init与npm install 至此，hexo已安装完毕，这样我们就已经可以再本地写博文了。 关联GitHub Pages接下来我们的工作是把本地的博文部署到gitpage上，以供他人阅览，总不能自己写的博客仅给自己看吧^_^ 本节的首要前提是你的电脑需要有自己仓库的push权限，权限的配置只需到github个人设置里添加本机的ssh key即可，这个网上有很多教程就不进行赘述了。 1）先在github上new一个仓库，仓库名必须是“github账户名.github.io”。以后它就是你个人博客的地址了。 2）安装git部署插件，执行1npm install hexo-deployer-git --save 3）配置根目录下的站点配置文件_config.yml。在文件的下方，修改1234deploy: type: git repo: https://github.com/yourgithub/yourgithub.github.io.git branch: master 注意需要有branch属性，有的教程里面说不需要，但经过我自己实践是需要的。至此，关联gitpage完毕。 关于部署部署之前，肯定先是准备自己的博文，执行1hexo new "article_name" 就会在/source/_posts/下生成article_name.md文件，支持MarkDown语法，然后就可以欢快地进行书写了。 在真正部署之前，我一般喜欢在本地预览下效果，执行12hexo g //hexo generate 生成页面hexo s //hexo server 本地服务器启动 然后打开浏览器输入localhost:4000即可访问。 到了真正部署就容易了，执行1hexo d //hexo deploy 部署页面 随后浏览 https://yourgithub.github.io 即可，以后它就是你的站点了。当然它只是个二级域名，你还可以购买自己的域名，这样就更利于博客的推广了：） 还有一条hexo clean，我一般是在执行修改themes等较大变动时执行的，注意是在hexo g与hexo d之前。 关于主题themes本博客是用的NexT主题，简洁大方，安装很容易，在博客根目录下 1）先clone next的主题1git clone https://github.com/iissnan/hexo-theme-next themes/next 2）修改站点配置文件_config.yml。找到theme:属性，修改为next即可。 duoshuo评论模块有了博文，自然需要评论区好让看客发言，本博客采用的是多说评论系统，关联新浪微博。 1）登录duoshuo官网，创建站点，记住自己的域名信息。 2）修改主题文件夹下的配置文件/themes/next/_config.yml，注意不是站点配置文件！修改：12# Duoshuo ShortNameduoshuo_shortname: yourduoshuo 3）最后hexo g和hexo d就行了。 关于更多评论区的设置，上duoshuo官网个人页面管理里就有了。 文章分享功能当我们有了duoshuo账户后，只需要一句配置就可以开启分享功能了~修改主题配置文件/themes/next/_config.yml的duoshuo_share12# Shareduoshuo_share: true 站内搜索1）安装hexo-generator-searchdb插件，在博客根目录下执行1npm install hexo-generator-searchdb --save 2）修改站点的配置文件_config.yml，新增search项：12345search: path: search.xml field: post format: html limit: 10000 文章阅读量统计这里用的是LearnCloud，配置过程参考链接10已经描述的非常清楚了，相信诸君能看懂。 插件推荐这个是看网上前人推荐的，个人感觉挺好用的： 支持RSS：npm install hexo-generator-feed –save 生成站点地图：npm install hexo-generator-sitemap –save 生成百度站点地图：npm install hexo-generator-baidu-sitemap –save HTML压缩：npm install hexo-html-minifier –save JavaScript压缩：npm install hexo-uglify –save CSS压缩插件：npm install hexo-clean-css –save SEO优化：npm install hexo-generator-seo-friendly-sitemap –save References https://www.npmjs.com/package/hexo http://www.jianshu.com/p/465830080ea9 http://www.jianshu.com/p/db7e64d86067 http://www.jianshu.com/p/ecd51e8ef2fa http://www.jianshu.com/p/2640561e96f8 https://www.zhihu.com/question/29017171 https://www.zhihu.com/question/24422335 http://www.docin.com/p-732332535.html http://theme-next.iissnan.com/third-party-services.html#local-search https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud]]></content>
    </entry>

    
  
  
</search>
